/*
 * Yagna Market API
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase). 
 *
 * OpenAPI spec version: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package network.golem.yajapi.market.apis;

import network.golem.yajapi.market.ApiException;
import network.golem.yajapi.market.models.Agreement;
import network.golem.yajapi.market.models.ErrorMessage;
import network.golem.yajapi.market.models.Offer;
import network.golem.yajapi.market.models.PropertyQueryReply;
import network.golem.yajapi.market.models.Proposal;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProviderApi
 */
@Ignore
public class ProviderApiTest {

    private final ProviderApi api = new ProviderApi();

    /**
     * Approves Agreement proposed by the Reqestor.
     *
     * This is a blocking operation. The call may be aborted by Provider caller code. After the call is aborted or timed out, another &#x60;approveAgreement&#x60; call can be raised on the same &#x60;agreementId&#x60;. It returns one of the following options: * &#x60;Approved&#x60; - Indicates that the approved Agreement has been successfully delivered to the Requestor and acknowledged.   - The Requestor side has been notified about the Provider’s commitment     to the Agreement.   - The Provider is now ready to accept a request to start an Activity     as described in the negotiated agreement.   - The Requestor’s corresponding &#x60;waitForApproval&#x60; call returns &#x60;Approved&#x60; after     the one on the Provider side.  * &#x60;Cancelled&#x60; - Indicates that before delivering the approved Agreement, the Requestor has called &#x60;cancelAgreement&#x60;, thus invalidating the Agreement. The Provider may attempt to return to the Negotiation phase by sending a new Proposal.  **Note**: It is expected from the Provider node implementation to “ring-fence” the resources required to fulfill the Agreement before the ApproveAgreement is sent. However, the resources should not be fully committed until &#x60;Approved&#x60; response is received from the &#x60;approveAgreement&#x60; call.  **Note**: Mutually exclusive with &#x60;rejectAgreement&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void approveAgreementTest() throws ApiException {
        String agreementId = null;
        Float timeout = null;
        String response = api.approveAgreement(agreementId, timeout);

        // TODO: test validations
    }
    /**
     * Reads Market responses to published Offer.
     *
     * This is a blocking operation. It will not return until there is at least one new event.  **Note**: When &#x60;collectDemands&#x60; is waiting, simultaneous call to &#x60;unsubscribeOffer&#x60; on the same &#x60;subscriptionId&#x60; should result in \&quot;Subscription does not exist\&quot; error returned from &#x60;collectDemands&#x60;.  **Note**: Specification requires this endpoint to support list of specific Proposal Ids to listen for messages related only to specific Proposals. This is not covered yet. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void collectDemandsTest() throws ApiException {
        String subscriptionId = null;
        Float timeout = null;
        Integer maxEvents = null;
        List<Object> response = api.collectDemands(subscriptionId, timeout, maxEvents);

        // TODO: test validations
    }
    /**
     * Responds with a bespoke Offer to received Demand.
     *
     * Creates and sends a modified version of original Offer (a counter-proposal) adjusted to previously received Proposal (ie. Demand). Changes Proposal state to &#x60;Draft&#x60;. Returns created Proposal id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void counterProposalOfferTest() throws ApiException {
        Proposal body = null;
        String subscriptionId = null;
        String proposalId = null;
        String response = api.counterProposalOffer(body, subscriptionId, proposalId);

        // TODO: test validations
    }
    /**
     * Fetches agreement with given agreement id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgreementTest() throws ApiException {
        String agreementId = null;
        Agreement response = api.getAgreement(agreementId);

        // TODO: test validations
    }
    /**
     * Fetches all active Offers which have been published by the Provider.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOffersTest() throws ApiException {
        List<Object> response = api.getOffers();

        // TODO: test validations
    }
    /**
     * Fetches Proposal (Demand) with given id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProposalDemandTest() throws ApiException {
        String subscriptionId = null;
        String proposalId = null;
        Proposal response = api.getProposalDemand(subscriptionId, proposalId);

        // TODO: test validations
    }
    /**
     * Handles dynamic property query.
     *
     * The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.  **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.  **Note**: This method must be implemented for Market API Capability Level 2. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryReplyOffersTest() throws ApiException {
        PropertyQueryReply body = null;
        String subscriptionId = null;
        String queryId = null;
        api.queryReplyOffers(body, subscriptionId, queryId);

        // TODO: test validations
    }
    /**
     * Rejects Agreement proposed by the Requestor.
     *
     * The Requestor side is notified about the Provider’s decision to reject a negotiated agreement. This effectively stops the Agreement handshake.  **Note**: Mutually exclusive with &#x60;approveAgreement&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rejectAgreementTest() throws ApiException {
        String agreementId = null;
        api.rejectAgreement(agreementId);

        // TODO: test validations
    }
    /**
     * Rejects Proposal (Demand).
     *
     * Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rejectProposalDemandTest() throws ApiException {
        String subscriptionId = null;
        String proposalId = null;
        api.rejectProposalDemand(subscriptionId, proposalId);

        // TODO: test validations
    }
    /**
     * Publishes Provider capabilities via Offer.
     *
     * Offer object can be considered an \&quot;open\&quot; or public Offer, as it is not directed at a specific Requestor, but rather is sent to the market so that the matching mechanism implementation can associate relevant Demands.  **Note**: it is an \&quot;atomic\&quot; operation, ie. as soon as Subscription is placed, the Offer is published on the market. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeOfferTest() throws ApiException {
        Offer body = null;
        String response = api.subscribeOffer(body);

        // TODO: test validations
    }
    /**
     * Terminates approved Agreement.
     *
     * Method to finish/close the Agreement while in &#x60;Approved&#x60; state. The other party gets notified about calling party decision to terminate a \&quot;running\&quot; agreement. **Note**: Can be invoked at any time after Agreement was approved by both sides. Financial and reputational consequences are not defined by this specification. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void terminateAgreementTest() throws ApiException {
        String agreementId = null;
        api.terminateAgreement(agreementId);

        // TODO: test validations
    }
    /**
     * Stop subscription for previously published Offer.
     *
     * Stop receiving Proposals.  **Note**: this will terminate all pending &#x60;collectDemands&#x60; calls on this subscription. This implies, that client code should not &#x60;unsubscribeOffer&#x60; before it has received all expected/useful inputs from &#x60;collectDemands&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeOfferTest() throws ApiException {
        String subscriptionId = null;
        api.unsubscribeOffer(subscriptionId);

        // TODO: test validations
    }
}
