/*
 * Yagna Activity API
 * It conforms with capability level 1 of the [Activity API specification](https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM).
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package network.golem.yajapi.activity.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
/**
 * ActivityState
 */


public class ActivityState implements Serializable{
  private static final long serialVersionUID = 1L;
  /**
   * Gets or Sets state
   */
  public enum StateEnum {
    NEW("New"),
    INITIALIZED("Initialized"),
    DEPLOYED("Deployed"),
    READY("Ready"),
    UNRESPONSIVE("Unresponsive"),
    TERMINATED("Terminated");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("state")
  private List<StateEnum> state = new ArrayList<>();

  @JsonProperty("reason")
  private String reason = null;

  @JsonProperty("errorMessage")
  private String errorMessage = null;

  public ActivityState state(List<StateEnum> state) {
    this.state = state;
    return this;
  }

  public ActivityState addStateItem(StateEnum stateItem) {
    this.state.add(stateItem);
    return this;
  }

   /**
   * State pair tuple (CurrentState, NextState). NextState is equal to null if there is no pending transition between states.
   * @return state
  **/
  @Schema(required = true, description = "State pair tuple (CurrentState, NextState). NextState is equal to null if there is no pending transition between states.")
  public List<StateEnum> getState() {
    return state;
  }

  public void setState(List<StateEnum> state) {
    this.state = state;
  }

  public ActivityState reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Reason for Activity termination (specified when Activity in Terminated state).
   * @return reason
  **/
  @Schema(description = "Reason for Activity termination (specified when Activity in Terminated state).")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public ActivityState errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * If error caused state change - error message shall be provided.
   * @return errorMessage
  **/
  @Schema(description = "If error caused state change - error message shall be provided.")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityState activityState = (ActivityState) o;
    return Objects.equals(this.state, activityState.state) &&
        Objects.equals(this.reason, activityState.reason) &&
        Objects.equals(this.errorMessage, activityState.errorMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, reason, errorMessage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityState {\n");
    
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
