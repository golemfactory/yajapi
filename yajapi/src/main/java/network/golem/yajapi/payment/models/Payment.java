/*
 * Yagna Payment API
 *  Invoicing and Payments is a fundamental area of Yagna Ecosystem functionality. It includes aspects of communication between Requestor, Provider and a selected Payment Platform, which becomes crucial when Activities are executed in the context of negotiated Agreements. Yagna applications must be able to exercise various payment models, and the Invoicing/Payment-related communication is happening in parallel to Activity control communication. To define functional patterns of Requestor/Provider interaction in this area, Payment API is specified.  An important principle of the Yagna Payment API is that the actual payment transactions are hidden behind the Invoice flow. In other words, a Yagna Application on Requestor side isn’t expected to trigger actual payment transactions. Instead it is expected to receive and accept Invoices raised by the Provider - based on Application’s Invoice Accept notifications, the Payment API implementation orchestrates the payment via a configured Payment platform.  **NOTE: This specification is work-in-progress.** 
 *
 * OpenAPI spec version: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package network.golem.yajapi.payment.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import network.golem.yajapi.payment.models.ActivityPayment;
import network.golem.yajapi.payment.models.AgreementPayment;
import java.io.Serializable;
/**
 * ADD DESCRIPTION
 */
@Schema(description = "ADD DESCRIPTION")

public class Payment implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("paymentId")
  private String paymentId = null;

  @JsonProperty("payerId")
  private String payerId = null;

  @JsonProperty("payeeId")
  private String payeeId = null;

  @JsonProperty("payerAddr")
  private String payerAddr = null;

  @JsonProperty("payeeAddr")
  private String payeeAddr = null;

  @JsonProperty("paymentPlatform")
  private String paymentPlatform = null;

  @JsonProperty("amount")
  private String amount = null;

  @JsonProperty("timestamp")
  private OffsetDateTime timestamp = null;

  @JsonProperty("agreementPayments")
  private List<AgreementPayment> agreementPayments = new ArrayList<>();

  @JsonProperty("activityPayments")
  private List<ActivityPayment> activityPayments = new ArrayList<>();

  @JsonProperty("details")
  private byte[] details = null;

  public Payment paymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

   /**
   * Get paymentId
   * @return paymentId
  **/
  @Schema(required = true, description = "")
  public String getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(String paymentId) {
    this.paymentId = paymentId;
  }

  public Payment payerId(String payerId) {
    this.payerId = payerId;
    return this;
  }

   /**
   * Get payerId
   * @return payerId
  **/
  @Schema(required = true, description = "")
  public String getPayerId() {
    return payerId;
  }

  public void setPayerId(String payerId) {
    this.payerId = payerId;
  }

  public Payment payeeId(String payeeId) {
    this.payeeId = payeeId;
    return this;
  }

   /**
   * Get payeeId
   * @return payeeId
  **/
  @Schema(required = true, description = "")
  public String getPayeeId() {
    return payeeId;
  }

  public void setPayeeId(String payeeId) {
    this.payeeId = payeeId;
  }

  public Payment payerAddr(String payerAddr) {
    this.payerAddr = payerAddr;
    return this;
  }

   /**
   * Get payerAddr
   * @return payerAddr
  **/
  @Schema(required = true, description = "")
  public String getPayerAddr() {
    return payerAddr;
  }

  public void setPayerAddr(String payerAddr) {
    this.payerAddr = payerAddr;
  }

  public Payment payeeAddr(String payeeAddr) {
    this.payeeAddr = payeeAddr;
    return this;
  }

   /**
   * Get payeeAddr
   * @return payeeAddr
  **/
  @Schema(required = true, description = "")
  public String getPayeeAddr() {
    return payeeAddr;
  }

  public void setPayeeAddr(String payeeAddr) {
    this.payeeAddr = payeeAddr;
  }

  public Payment paymentPlatform(String paymentPlatform) {
    this.paymentPlatform = paymentPlatform;
    return this;
  }

   /**
   * Get paymentPlatform
   * @return paymentPlatform
  **/
  @Schema(required = true, description = "")
  public String getPaymentPlatform() {
    return paymentPlatform;
  }

  public void setPaymentPlatform(String paymentPlatform) {
    this.paymentPlatform = paymentPlatform;
  }

  public Payment amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @Schema(required = true, description = "")
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }

  public Payment timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  public Payment agreementPayments(List<AgreementPayment> agreementPayments) {
    this.agreementPayments = agreementPayments;
    return this;
  }

  public Payment addAgreementPaymentsItem(AgreementPayment agreementPaymentsItem) {
    this.agreementPayments.add(agreementPaymentsItem);
    return this;
  }

   /**
   * Get agreementPayments
   * @return agreementPayments
  **/
  @Schema(required = true, description = "")
  public List<AgreementPayment> getAgreementPayments() {
    return agreementPayments;
  }

  public void setAgreementPayments(List<AgreementPayment> agreementPayments) {
    this.agreementPayments = agreementPayments;
  }

  public Payment activityPayments(List<ActivityPayment> activityPayments) {
    this.activityPayments = activityPayments;
    return this;
  }

  public Payment addActivityPaymentsItem(ActivityPayment activityPaymentsItem) {
    this.activityPayments.add(activityPaymentsItem);
    return this;
  }

   /**
   * Get activityPayments
   * @return activityPayments
  **/
  @Schema(required = true, description = "")
  public List<ActivityPayment> getActivityPayments() {
    return activityPayments;
  }

  public void setActivityPayments(List<ActivityPayment> activityPayments) {
    this.activityPayments = activityPayments;
  }

  public Payment details(byte[] details) {
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @Schema(required = true, description = "")
  public byte[] getDetails() {
    return details;
  }

  public void setDetails(byte[] details) {
    this.details = details;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payment payment = (Payment) o;
    return Objects.equals(this.paymentId, payment.paymentId) &&
        Objects.equals(this.payerId, payment.payerId) &&
        Objects.equals(this.payeeId, payment.payeeId) &&
        Objects.equals(this.payerAddr, payment.payerAddr) &&
        Objects.equals(this.payeeAddr, payment.payeeAddr) &&
        Objects.equals(this.paymentPlatform, payment.paymentPlatform) &&
        Objects.equals(this.amount, payment.amount) &&
        Objects.equals(this.timestamp, payment.timestamp) &&
        Objects.equals(this.agreementPayments, payment.agreementPayments) &&
        Objects.equals(this.activityPayments, payment.activityPayments) &&
        Arrays.equals(this.details, payment.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentId, payerId, payeeId, payerAddr, payeeAddr, paymentPlatform, amount, timestamp, agreementPayments, activityPayments, Arrays.hashCode(details));
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payment {\n");
    
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    payerId: ").append(toIndentedString(payerId)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    payerAddr: ").append(toIndentedString(payerAddr)).append("\n");
    sb.append("    payeeAddr: ").append(toIndentedString(payeeAddr)).append("\n");
    sb.append("    paymentPlatform: ").append(toIndentedString(paymentPlatform)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    agreementPayments: ").append(toIndentedString(agreementPayments)).append("\n");
    sb.append("    activityPayments: ").append(toIndentedString(activityPayments)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
