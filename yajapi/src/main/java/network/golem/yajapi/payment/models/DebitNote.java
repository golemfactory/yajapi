/*
 * Yagna Payment API
 *  Invoicing and Payments is a fundamental area of Yagna Ecosystem functionality. It includes aspects of communication between Requestor, Provider and a selected Payment Platform, which becomes crucial when Activities are executed in the context of negotiated Agreements. Yagna applications must be able to exercise various payment models, and the Invoicing/Payment-related communication is happening in parallel to Activity control communication. To define functional patterns of Requestor/Provider interaction in this area, Payment API is specified.  An important principle of the Yagna Payment API is that the actual payment transactions are hidden behind the Invoice flow. In other words, a Yagna Application on Requestor side isn’t expected to trigger actual payment transactions. Instead it is expected to receive and accept Invoices raised by the Provider - based on Application’s Invoice Accept notifications, the Payment API implementation orchestrates the payment via a configured Payment platform.  **NOTE: This specification is work-in-progress.** 
 *
 * OpenAPI spec version: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package network.golem.yajapi.payment.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import network.golem.yajapi.payment.models.InvoiceStatus;
import java.io.Serializable;
/**
 * A Debit Note is an artifact issued by the Provider to the Requestor, in the context of a specific Agreement. It is a notification of Total Amount Due incurred by Activities in this Agreement until the moment the Debit Note is issued. This is expected to be used as trigger for payment in upfront-payment or pay-as-you-go scenarios.  NOTE: Debit Notes flag the current Total Amount Due, which is accumulated from the start of Agreement. Debit Notes are expected to trigger payments, therefore payment amount for the newly received Debit Note is expected to be determined by difference of Total Payments for the Agreement vs Total Amount Due. 
 */
@Schema(description = "A Debit Note is an artifact issued by the Provider to the Requestor, in the context of a specific Agreement. It is a notification of Total Amount Due incurred by Activities in this Agreement until the moment the Debit Note is issued. This is expected to be used as trigger for payment in upfront-payment or pay-as-you-go scenarios.  NOTE: Debit Notes flag the current Total Amount Due, which is accumulated from the start of Agreement. Debit Notes are expected to trigger payments, therefore payment amount for the newly received Debit Note is expected to be determined by difference of Total Payments for the Agreement vs Total Amount Due. ")

public class DebitNote implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("debitNoteId")
  private String debitNoteId = null;

  @JsonProperty("issuerId")
  private String issuerId = null;

  @JsonProperty("recipientId")
  private String recipientId = null;

  @JsonProperty("payeeAddr")
  private String payeeAddr = null;

  @JsonProperty("payerAddr")
  private String payerAddr = null;

  @JsonProperty("paymentPlatform")
  private String paymentPlatform = null;

  @JsonProperty("previousDebitNoteId")
  private String previousDebitNoteId = null;

  @JsonProperty("timestamp")
  private OffsetDateTime timestamp = null;

  @JsonProperty("agreementId")
  private String agreementId = null;

  @JsonProperty("activityId")
  private String activityId = null;

  @JsonProperty("totalAmountDue")
  private String totalAmountDue = null;

  @JsonProperty("usageCounterVector")
  private Object usageCounterVector = null;

  @JsonProperty("paymentDueDate")
  private OffsetDateTime paymentDueDate = null;

  @JsonProperty("status")
  private InvoiceStatus status = null;

   /**
   * Get debitNoteId
   * @return debitNoteId
  **/
  @Schema(required = true, description = "")
  public String getDebitNoteId() {
    return debitNoteId;
  }

   /**
   * Get issuerId
   * @return issuerId
  **/
  @Schema(required = true, description = "")
  public String getIssuerId() {
    return issuerId;
  }

   /**
   * Get recipientId
   * @return recipientId
  **/
  @Schema(required = true, description = "")
  public String getRecipientId() {
    return recipientId;
  }

   /**
   * Get payeeAddr
   * @return payeeAddr
  **/
  @Schema(description = "")
  public String getPayeeAddr() {
    return payeeAddr;
  }

   /**
   * Get payerAddr
   * @return payerAddr
  **/
  @Schema(description = "")
  public String getPayerAddr() {
    return payerAddr;
  }

   /**
   * Get paymentPlatform
   * @return paymentPlatform
  **/
  @Schema(description = "")
  public String getPaymentPlatform() {
    return paymentPlatform;
  }

   /**
   * Get previousDebitNoteId
   * @return previousDebitNoteId
  **/
  @Schema(description = "")
  public String getPreviousDebitNoteId() {
    return previousDebitNoteId;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

   /**
   * Get agreementId
   * @return agreementId
  **/
  @Schema(required = true, description = "")
  public String getAgreementId() {
    return agreementId;
  }

  public DebitNote activityId(String activityId) {
    this.activityId = activityId;
    return this;
  }

   /**
   * Get activityId
   * @return activityId
  **/
  @Schema(required = true, description = "")
  public String getActivityId() {
    return activityId;
  }

  public void setActivityId(String activityId) {
    this.activityId = activityId;
  }

  public DebitNote totalAmountDue(String totalAmountDue) {
    this.totalAmountDue = totalAmountDue;
    return this;
  }

   /**
   * Get totalAmountDue
   * @return totalAmountDue
  **/
  @Schema(required = true, description = "")
  public String getTotalAmountDue() {
    return totalAmountDue;
  }

  public void setTotalAmountDue(String totalAmountDue) {
    this.totalAmountDue = totalAmountDue;
  }

  public DebitNote usageCounterVector(Object usageCounterVector) {
    this.usageCounterVector = usageCounterVector;
    return this;
  }

   /**
   * Get usageCounterVector
   * @return usageCounterVector
  **/
  @Schema(description = "")
  public Object getUsageCounterVector() {
    return usageCounterVector;
  }

  public void setUsageCounterVector(Object usageCounterVector) {
    this.usageCounterVector = usageCounterVector;
  }

  public DebitNote paymentDueDate(OffsetDateTime paymentDueDate) {
    this.paymentDueDate = paymentDueDate;
    return this;
  }

   /**
   * Get paymentDueDate
   * @return paymentDueDate
  **/
  @Schema(description = "")
  public OffsetDateTime getPaymentDueDate() {
    return paymentDueDate;
  }

  public void setPaymentDueDate(OffsetDateTime paymentDueDate) {
    this.paymentDueDate = paymentDueDate;
  }

  public DebitNote status(InvoiceStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(required = true, description = "")
  public InvoiceStatus getStatus() {
    return status;
  }

  public void setStatus(InvoiceStatus status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DebitNote debitNote = (DebitNote) o;
    return Objects.equals(this.debitNoteId, debitNote.debitNoteId) &&
        Objects.equals(this.issuerId, debitNote.issuerId) &&
        Objects.equals(this.recipientId, debitNote.recipientId) &&
        Objects.equals(this.payeeAddr, debitNote.payeeAddr) &&
        Objects.equals(this.payerAddr, debitNote.payerAddr) &&
        Objects.equals(this.paymentPlatform, debitNote.paymentPlatform) &&
        Objects.equals(this.previousDebitNoteId, debitNote.previousDebitNoteId) &&
        Objects.equals(this.timestamp, debitNote.timestamp) &&
        Objects.equals(this.agreementId, debitNote.agreementId) &&
        Objects.equals(this.activityId, debitNote.activityId) &&
        Objects.equals(this.totalAmountDue, debitNote.totalAmountDue) &&
        Objects.equals(this.usageCounterVector, debitNote.usageCounterVector) &&
        Objects.equals(this.paymentDueDate, debitNote.paymentDueDate) &&
        Objects.equals(this.status, debitNote.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(debitNoteId, issuerId, recipientId, payeeAddr, payerAddr, paymentPlatform, previousDebitNoteId, timestamp, agreementId, activityId, totalAmountDue, usageCounterVector, paymentDueDate, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DebitNote {\n");
    
    sb.append("    debitNoteId: ").append(toIndentedString(debitNoteId)).append("\n");
    sb.append("    issuerId: ").append(toIndentedString(issuerId)).append("\n");
    sb.append("    recipientId: ").append(toIndentedString(recipientId)).append("\n");
    sb.append("    payeeAddr: ").append(toIndentedString(payeeAddr)).append("\n");
    sb.append("    payerAddr: ").append(toIndentedString(payerAddr)).append("\n");
    sb.append("    paymentPlatform: ").append(toIndentedString(paymentPlatform)).append("\n");
    sb.append("    previousDebitNoteId: ").append(toIndentedString(previousDebitNoteId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    agreementId: ").append(toIndentedString(agreementId)).append("\n");
    sb.append("    activityId: ").append(toIndentedString(activityId)).append("\n");
    sb.append("    totalAmountDue: ").append(toIndentedString(totalAmountDue)).append("\n");
    sb.append("    usageCounterVector: ").append(toIndentedString(usageCounterVector)).append("\n");
    sb.append("    paymentDueDate: ").append(toIndentedString(paymentDueDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
