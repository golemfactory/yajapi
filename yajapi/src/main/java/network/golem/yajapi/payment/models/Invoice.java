/*
 * Yagna Payment API
 *  Invoicing and Payments is a fundamental area of Yagna Ecosystem functionality. It includes aspects of communication between Requestor, Provider and a selected Payment Platform, which becomes crucial when Activities are executed in the context of negotiated Agreements. Yagna applications must be able to exercise various payment models, and the Invoicing/Payment-related communication is happening in parallel to Activity control communication. To define functional patterns of Requestor/Provider interaction in this area, Payment API is specified.  An important principle of the Yagna Payment API is that the actual payment transactions are hidden behind the Invoice flow. In other words, a Yagna Application on Requestor side isn’t expected to trigger actual payment transactions. Instead it is expected to receive and accept Invoices raised by the Provider - based on Application’s Invoice Accept notifications, the Payment API implementation orchestrates the payment via a configured Payment platform.  **NOTE: This specification is work-in-progress.** 
 *
 * OpenAPI spec version: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package network.golem.yajapi.payment.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import network.golem.yajapi.payment.models.InvoiceStatus;
import java.io.Serializable;
/**
 * An Invoice is an artifact issued by the Provider to the Requestor, in the context of a specific Agreement. It indicates the total Amount owed by the Requestor in this Agreement. No further Debit Notes shall be issued after the Invoice is issued. The issue of Invoice signals the Termination of the Agreement (if it hasn&#x27;t been terminated already). No Activity execution is allowed after the Invoice is issued.  NOTE: An invoice can be issued even before any Activity is started in the context of an Agreement (eg. in one off, &#x27;fire-and-forget&#x27; payment regime). 
 */
@Schema(description = "An Invoice is an artifact issued by the Provider to the Requestor, in the context of a specific Agreement. It indicates the total Amount owed by the Requestor in this Agreement. No further Debit Notes shall be issued after the Invoice is issued. The issue of Invoice signals the Termination of the Agreement (if it hasn't been terminated already). No Activity execution is allowed after the Invoice is issued.  NOTE: An invoice can be issued even before any Activity is started in the context of an Agreement (eg. in one off, 'fire-and-forget' payment regime). ")

public class Invoice implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("invoiceId")
  private String invoiceId = null;

  @JsonProperty("issuerId")
  private String issuerId = null;

  @JsonProperty("recipientId")
  private String recipientId = null;

  @JsonProperty("payeeAddr")
  private String payeeAddr = null;

  @JsonProperty("payerAddr")
  private String payerAddr = null;

  @JsonProperty("paymentPlatform")
  private String paymentPlatform = null;

  @JsonProperty("lastDebitNoteId")
  private String lastDebitNoteId = null;

  @JsonProperty("timestamp")
  private OffsetDateTime timestamp = null;

  @JsonProperty("agreementId")
  private String agreementId = null;

  @JsonProperty("activityIds")
  private List<String> activityIds = null;

  @JsonProperty("amount")
  private String amount = null;

  @JsonProperty("paymentDueDate")
  private OffsetDateTime paymentDueDate = null;

  @JsonProperty("status")
  private InvoiceStatus status = null;

   /**
   * Get invoiceId
   * @return invoiceId
  **/
  @Schema(required = true, description = "")
  public String getInvoiceId() {
    return invoiceId;
  }

   /**
   * Get issuerId
   * @return issuerId
  **/
  @Schema(required = true, description = "")
  public String getIssuerId() {
    return issuerId;
  }

   /**
   * Get recipientId
   * @return recipientId
  **/
  @Schema(required = true, description = "")
  public String getRecipientId() {
    return recipientId;
  }

   /**
   * Get payeeAddr
   * @return payeeAddr
  **/
  @Schema(description = "")
  public String getPayeeAddr() {
    return payeeAddr;
  }

   /**
   * Get payerAddr
   * @return payerAddr
  **/
  @Schema(description = "")
  public String getPayerAddr() {
    return payerAddr;
  }

   /**
   * Get paymentPlatform
   * @return paymentPlatform
  **/
  @Schema(description = "")
  public String getPaymentPlatform() {
    return paymentPlatform;
  }

   /**
   * Get lastDebitNoteId
   * @return lastDebitNoteId
  **/
  @Schema(description = "")
  public String getLastDebitNoteId() {
    return lastDebitNoteId;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public Invoice agreementId(String agreementId) {
    this.agreementId = agreementId;
    return this;
  }

   /**
   * Get agreementId
   * @return agreementId
  **/
  @Schema(required = true, description = "")
  public String getAgreementId() {
    return agreementId;
  }

  public void setAgreementId(String agreementId) {
    this.agreementId = agreementId;
  }

  public Invoice activityIds(List<String> activityIds) {
    this.activityIds = activityIds;
    return this;
  }

  public Invoice addActivityIdsItem(String activityIdsItem) {
    if (this.activityIds == null) {
      this.activityIds = new ArrayList<>();
    }
    this.activityIds.add(activityIdsItem);
    return this;
  }

   /**
   * Get activityIds
   * @return activityIds
  **/
  @Schema(description = "")
  public List<String> getActivityIds() {
    return activityIds;
  }

  public void setActivityIds(List<String> activityIds) {
    this.activityIds = activityIds;
  }

  public Invoice amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @Schema(required = true, description = "")
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }

  public Invoice paymentDueDate(OffsetDateTime paymentDueDate) {
    this.paymentDueDate = paymentDueDate;
    return this;
  }

   /**
   * Get paymentDueDate
   * @return paymentDueDate
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getPaymentDueDate() {
    return paymentDueDate;
  }

  public void setPaymentDueDate(OffsetDateTime paymentDueDate) {
    this.paymentDueDate = paymentDueDate;
  }

  public Invoice status(InvoiceStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(required = true, description = "")
  public InvoiceStatus getStatus() {
    return status;
  }

  public void setStatus(InvoiceStatus status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invoice invoice = (Invoice) o;
    return Objects.equals(this.invoiceId, invoice.invoiceId) &&
        Objects.equals(this.issuerId, invoice.issuerId) &&
        Objects.equals(this.recipientId, invoice.recipientId) &&
        Objects.equals(this.payeeAddr, invoice.payeeAddr) &&
        Objects.equals(this.payerAddr, invoice.payerAddr) &&
        Objects.equals(this.paymentPlatform, invoice.paymentPlatform) &&
        Objects.equals(this.lastDebitNoteId, invoice.lastDebitNoteId) &&
        Objects.equals(this.timestamp, invoice.timestamp) &&
        Objects.equals(this.agreementId, invoice.agreementId) &&
        Objects.equals(this.activityIds, invoice.activityIds) &&
        Objects.equals(this.amount, invoice.amount) &&
        Objects.equals(this.paymentDueDate, invoice.paymentDueDate) &&
        Objects.equals(this.status, invoice.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invoiceId, issuerId, recipientId, payeeAddr, payerAddr, paymentPlatform, lastDebitNoteId, timestamp, agreementId, activityIds, amount, paymentDueDate, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invoice {\n");
    
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    issuerId: ").append(toIndentedString(issuerId)).append("\n");
    sb.append("    recipientId: ").append(toIndentedString(recipientId)).append("\n");
    sb.append("    payeeAddr: ").append(toIndentedString(payeeAddr)).append("\n");
    sb.append("    payerAddr: ").append(toIndentedString(payerAddr)).append("\n");
    sb.append("    paymentPlatform: ").append(toIndentedString(paymentPlatform)).append("\n");
    sb.append("    lastDebitNoteId: ").append(toIndentedString(lastDebitNoteId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    agreementId: ").append(toIndentedString(agreementId)).append("\n");
    sb.append("    activityIds: ").append(toIndentedString(activityIds)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    paymentDueDate: ").append(toIndentedString(paymentDueDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
