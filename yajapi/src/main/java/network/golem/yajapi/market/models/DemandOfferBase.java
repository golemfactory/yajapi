/*
 * Yagna Market API
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase). 
 *
 * OpenAPI spec version: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package network.golem.yajapi.market.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.Serializable;
/**
 * DemandOfferBase
 */


public class DemandOfferBase implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("properties")
  private Object properties = null;

  @JsonProperty("constraints")
  private String constraints = null;

  public DemandOfferBase properties(Object properties) {
    this.properties = properties;
    return this;
  }

   /**
   * The object which includes all the Demand/Offer properties. - Client and server accepts all JSON formats when submitting Demands/Offers to REST API. - \&quot;flat format\&quot; is mandatory when returning Demands/Offers from REST API By \&quot;flat format\&quot; we mean single level key-value map, where keys are full property names and their values indicate properties. The value&#x27;s Javascript type shall conform with the type of the property (as indicated in Golem Standards). ### Example property object: &#x60;&#x60;&#x60; {   \&quot;golem.com.pricing.model\&quot;:\&quot;linear\&quot;,   \&quot;golem.com.pricing.model.linear.coeffs\&quot;:[0.001, 0.002, 0.0],   \&quot;golem.com.scheme\&quot;:\&quot;payu\&quot;,   \&quot;golem.com.scheme.payu.interval_sec\&quot;:6.0,   \&quot;golem.com.usage.vector\&quot;:[\&quot;golem.usage.duration_sec\&quot;,\&quot;golem.usage.cpu_sec\&quot;],   \&quot;golem.inf.cpu.architecture\&quot;:\&quot;x86_64\&quot;,   \&quot;golem.inf.cpu.cores\&quot;:4,   \&quot;golem.inf.cpu.threads\&quot;:7,   \&quot;golem.inf.mem.gib\&quot;:10.612468048930168,   \&quot;golem.inf.storage.gib\&quot;:81.7227783203125,   \&quot;golem.node.debug.subnet\&quot;:\&quot;market-devnet\&quot;,   \&quot;golem.node.id.name\&quot;:\&quot;tworec@mf-market-devnet\&quot;,   \&quot;golem.runtime.name\&quot;:\&quot;vm\&quot;,   \&quot;golem.runtime.version@v\&quot;:\&quot;0.1.0\&quot; } &#x60;&#x60;&#x60; 
   * @return properties
  **/
  @Schema(required = true, description = "The object which includes all the Demand/Offer properties. - Client and server accepts all JSON formats when submitting Demands/Offers to REST API. - \"flat format\" is mandatory when returning Demands/Offers from REST API By \"flat format\" we mean single level key-value map, where keys are full property names and their values indicate properties. The value's Javascript type shall conform with the type of the property (as indicated in Golem Standards). ### Example property object: ``` {   \"golem.com.pricing.model\":\"linear\",   \"golem.com.pricing.model.linear.coeffs\":[0.001, 0.002, 0.0],   \"golem.com.scheme\":\"payu\",   \"golem.com.scheme.payu.interval_sec\":6.0,   \"golem.com.usage.vector\":[\"golem.usage.duration_sec\",\"golem.usage.cpu_sec\"],   \"golem.inf.cpu.architecture\":\"x86_64\",   \"golem.inf.cpu.cores\":4,   \"golem.inf.cpu.threads\":7,   \"golem.inf.mem.gib\":10.612468048930168,   \"golem.inf.storage.gib\":81.7227783203125,   \"golem.node.debug.subnet\":\"market-devnet\",   \"golem.node.id.name\":\"tworec@mf-market-devnet\",   \"golem.runtime.name\":\"vm\",   \"golem.runtime.version@v\":\"0.1.0\" } ``` ")
  public Object getProperties() {
    return properties;
  }

  public void setProperties(Object properties) {
    this.properties = properties;
  }

  public DemandOfferBase constraints(String constraints) {
    this.constraints = constraints;
    return this;
  }

   /**
   * Get constraints
   * @return constraints
  **/
  @Schema(required = true, description = "")
  public String getConstraints() {
    return constraints;
  }

  public void setConstraints(String constraints) {
    this.constraints = constraints;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DemandOfferBase demandOfferBase = (DemandOfferBase) o;
    return Objects.equals(this.properties, demandOfferBase.properties) &&
        Objects.equals(this.constraints, demandOfferBase.constraints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties, constraints);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DemandOfferBase {\n");
    
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
