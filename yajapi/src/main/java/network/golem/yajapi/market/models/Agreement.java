/*
 * Yagna Market API
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase). 
 *
 * OpenAPI spec version: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package network.golem.yajapi.market.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import network.golem.yajapi.market.models.Demand;
import network.golem.yajapi.market.models.Offer;
import java.io.Serializable;
/**
 * Agreement
 */


public class Agreement implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("agreementId")
  private String agreementId = null;

  @JsonProperty("demand")
  private Demand demand = null;

  @JsonProperty("offer")
  private Offer offer = null;

  @JsonProperty("validTo")
  private OffsetDateTime validTo = null;

  @JsonProperty("approvedDate")
  private OffsetDateTime approvedDate = null;

  /**
   * * &#x60;Proposal&#x60; - newly created by a Requestor (based on Proposal) * &#x60;Pending&#x60; - confirmed by a Requestor and send to Provider for approval * &#x60;Cancelled&#x60; by a Requestor * &#x60;Rejected&#x60; by a Provider * &#x60;Approved&#x60; by both sides * &#x60;Expired&#x60; - not accepted, rejected nor cancelled within validity period * &#x60;Terminated&#x60; - finished after approval. 
   */
  public enum StateEnum {
    PROPOSAL("Proposal"),
    PENDING("Pending"),
    CANCELLED("Cancelled"),
    REJECTED("Rejected"),
    APPROVED("Approved"),
    EXPIRED("Expired"),
    TERMINATED("Terminated");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("state")
  private StateEnum state = null;

  @JsonProperty("proposedSignature")
  private String proposedSignature = null;

  @JsonProperty("approvedSignature")
  private String approvedSignature = null;

  @JsonProperty("committedSignature")
  private String committedSignature = null;

  public Agreement agreementId(String agreementId) {
    this.agreementId = agreementId;
    return this;
  }

   /**
   * Get agreementId
   * @return agreementId
  **/
  @Schema(required = true, description = "")
  public String getAgreementId() {
    return agreementId;
  }

  public void setAgreementId(String agreementId) {
    this.agreementId = agreementId;
  }

  public Agreement demand(Demand demand) {
    this.demand = demand;
    return this;
  }

   /**
   * Get demand
   * @return demand
  **/
  @Schema(required = true, description = "")
  public Demand getDemand() {
    return demand;
  }

  public void setDemand(Demand demand) {
    this.demand = demand;
  }

  public Agreement offer(Offer offer) {
    this.offer = offer;
    return this;
  }

   /**
   * Get offer
   * @return offer
  **/
  @Schema(required = true, description = "")
  public Offer getOffer() {
    return offer;
  }

  public void setOffer(Offer offer) {
    this.offer = offer;
  }

  public Agreement validTo(OffsetDateTime validTo) {
    this.validTo = validTo;
    return this;
  }

   /**
   * End of validity period. Agreement needs to be accepted, rejected or cancellled before this date; otherwise will expire 
   * @return validTo
  **/
  @Schema(required = true, description = "End of validity period. Agreement needs to be accepted, rejected or cancellled before this date; otherwise will expire ")
  public OffsetDateTime getValidTo() {
    return validTo;
  }

  public void setValidTo(OffsetDateTime validTo) {
    this.validTo = validTo;
  }

  public Agreement approvedDate(OffsetDateTime approvedDate) {
    this.approvedDate = approvedDate;
    return this;
  }

   /**
   * date of the Agreement approval
   * @return approvedDate
  **/
  @Schema(description = "date of the Agreement approval")
  public OffsetDateTime getApprovedDate() {
    return approvedDate;
  }

  public void setApprovedDate(OffsetDateTime approvedDate) {
    this.approvedDate = approvedDate;
  }

  public Agreement state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * * &#x60;Proposal&#x60; - newly created by a Requestor (based on Proposal) * &#x60;Pending&#x60; - confirmed by a Requestor and send to Provider for approval * &#x60;Cancelled&#x60; by a Requestor * &#x60;Rejected&#x60; by a Provider * &#x60;Approved&#x60; by both sides * &#x60;Expired&#x60; - not accepted, rejected nor cancelled within validity period * &#x60;Terminated&#x60; - finished after approval. 
   * @return state
  **/
  @Schema(required = true, description = "* `Proposal` - newly created by a Requestor (based on Proposal) * `Pending` - confirmed by a Requestor and send to Provider for approval * `Cancelled` by a Requestor * `Rejected` by a Provider * `Approved` by both sides * `Expired` - not accepted, rejected nor cancelled within validity period * `Terminated` - finished after approval. ")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public Agreement proposedSignature(String proposedSignature) {
    this.proposedSignature = proposedSignature;
    return this;
  }

   /**
   * Get proposedSignature
   * @return proposedSignature
  **/
  @Schema(description = "")
  public String getProposedSignature() {
    return proposedSignature;
  }

  public void setProposedSignature(String proposedSignature) {
    this.proposedSignature = proposedSignature;
  }

  public Agreement approvedSignature(String approvedSignature) {
    this.approvedSignature = approvedSignature;
    return this;
  }

   /**
   * Get approvedSignature
   * @return approvedSignature
  **/
  @Schema(description = "")
  public String getApprovedSignature() {
    return approvedSignature;
  }

  public void setApprovedSignature(String approvedSignature) {
    this.approvedSignature = approvedSignature;
  }

  public Agreement committedSignature(String committedSignature) {
    this.committedSignature = committedSignature;
    return this;
  }

   /**
   * Get committedSignature
   * @return committedSignature
  **/
  @Schema(description = "")
  public String getCommittedSignature() {
    return committedSignature;
  }

  public void setCommittedSignature(String committedSignature) {
    this.committedSignature = committedSignature;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Agreement agreement = (Agreement) o;
    return Objects.equals(this.agreementId, agreement.agreementId) &&
        Objects.equals(this.demand, agreement.demand) &&
        Objects.equals(this.offer, agreement.offer) &&
        Objects.equals(this.validTo, agreement.validTo) &&
        Objects.equals(this.approvedDate, agreement.approvedDate) &&
        Objects.equals(this.state, agreement.state) &&
        Objects.equals(this.proposedSignature, agreement.proposedSignature) &&
        Objects.equals(this.approvedSignature, agreement.approvedSignature) &&
        Objects.equals(this.committedSignature, agreement.committedSignature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agreementId, demand, offer, validTo, approvedDate, state, proposedSignature, approvedSignature, committedSignature);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Agreement {\n");
    
    sb.append("    agreementId: ").append(toIndentedString(agreementId)).append("\n");
    sb.append("    demand: ").append(toIndentedString(demand)).append("\n");
    sb.append("    offer: ").append(toIndentedString(offer)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    approvedDate: ").append(toIndentedString(approvedDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    proposedSignature: ").append(toIndentedString(proposedSignature)).append("\n");
    sb.append("    approvedSignature: ").append(toIndentedString(approvedSignature)).append("\n");
    sb.append("    committedSignature: ").append(toIndentedString(committedSignature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
